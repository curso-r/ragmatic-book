{
    "collab_server" : "",
    "contents" : "# Princípios\n\n## O tidyverse\n\nO `tidyverse` é um pacote do R, cuja única função é carregar outros pacotes do R. O conjunto desses pacotes forma o `tidyverse`. É considerado um \"universo\" a parte do R pois todas suas ferramentas possuem formas de uso consistentes e funcionam muito bem em conjunto.\n\nOs princípios do `tidyverse` seguem abaixo.\n\n1. **Eficiência algorítmica vs eficiência de trabalho**. Suposição: o tempo que o estatísco gasta pensando em como realizar uma operação é mais importante do que o tempo que o computador gasta para realizar um cálculo.\n1. **Tidy data**. Princípio para arrumação de base de dados que resolve 90% dos problemas reais. O objetivo em *arrumação de dados* é extrair e transformar uma base de dados até que ela esteja em formato *tidy*. Essa é uma boa prática de análise de dados que economiza muito tempo em qualquer trabalho. Uma base de dados é considerada \"tidy\" se\n    - Cada observação é uma linha do bd.\n    - Cada variável é uma coluna do bd.\n    - Cada dado está numa célula do bd.\n\n1. **Utilização do operador `%>%` (pipe)**.  \n\n    > \"No matter how complex and polished the individual operations are, it is often the quality of the glue that most directly determines the power of the system.\"  \n    > -- Hal Abelson\n    > \n\n1. **Aparato mnemônico**. Pacotes baseados em teoria e API consistentes.\n1. **Minimalidade e funções puras**. Funções sem *side-effects*. Interagem com o mundo através de inputs e outputs. Encaixa perfeitamente com o princípio do pipe\n1. *workflow* para ciência de dados\n\n<img src=\"http://r4ds.had.co.nz/diagrams/data-science.png\" style=\"width: 500px;display: block;margin-left: auto;margin-right: auto \"/>\n\n## RStudio\n\nO RStudio é a melhor IDE para usar o R. O programa possui diversas vantagens e praticamente nenhuma desvantagem. Caso tenha interesse em se ambientar e entender as características do RStudio, veja [essa página](https://csgillespie.github.io/efficientR/set-up.html#rstudio). \n\nUma importante funcionalidade do RStudio é a possibilidade de criar projetos. Uma estrutura recomendada para organização de pacotes segue abaixo.\n\n```{r, engine='bash', eval = FALSE}\nproject/\n  - README.Rmd   # Descrição do pacote\n  - set-up.R     # Pacotes etc\n  - R/           # Código R, organizado com 0-load.R, 1-tidy.R, 2-vis.R, ...\n  - data/        # Dados (estruturados ou não)\n  - figures/     # gráficos (pode ficar dentro de output/)\n  - output/      # Relatórios em .Rmd, .tex etc\n  - project.Rproj\n```\n\nOutra possível forma de estruturar um projeto é organizando-o como um pacote do R:\n\n```{r, engine='bash', eval = FALSE}\nproject/\n  - README.md    # Descrição do pacote\n  - DESCRIPTION  # Metadados estruturados do pacote e dependências\n  - NAMESPACE    # importações e exportações do pacote\n  - vignettes/   # Relatórios em .Rmd\n  - R/           # Funções do R\n  - data/        # Dados estruturados (tidy data)\n  - data-raw/    # Dados não estruturados e arqs 0-load.R, 1-tidy.R, 2-vis.R, ...\n  - project.Rproj\n```\n\nPara detalhes de como criar pacotes no R de forma eficiente, leia o [r-pkgs](http://r-pkgs.had.co.nz). Recomendo a adoção de um critério consistente para organização de projetos. O estatístico não pode perder tempo com a estruturação das pastas, então é melhor forçar uma estrutura pré-fixada do que planejar a melhor forma de organização para cada projeto.\n\n## RMarkdown\n\nO RMarkdown é um tipo de documento especial que contém tanto textos (em markdown) quanto códigos em R (em chunks). O markdown nada mais é do que um documento de texto com alguns padrões básicos de formatação, como negrito, itálico, títulos, subtítulos, itemização e referências cruzadas. Já os chunks são pedaços de códigos em R encapsulados por três crases \"```\". Os códigos são executados sempre que o documento é processado para algum formato específico.\n\nA utilização do RMarkdown para produção de relatórios é essencial para o estatístico pragmático. O RMarkdown possui diversas vantagens:\n\n1. **Simplicidade e foco**. Obriga o usuário a focar na análise e não na formatação do documento.\n1. **Versátil**. Pode ser utilizado para gerar documentos em LaTeX, Word, HTML e apresentações em beamer, pptx e HTML (de vários tipos). Pode ainda gerar sites, livros, dissertações de mestrado e até mesmo dashboards interativos.\n1. **Reprodutível**. O RMarkdown nada mais é que um arquivo de texto. Além disso, ele tenta te obrigar a fazer o documento mais autocontido possível. Assim, um documento .Rmd é fácil de compartilhar e de ser utilizado pelo receptor. Lembre-se, o receptor pode ser o futuro você! Vale enfatizar que a reprodutibilidade é considerada como um dos princípios fundamentais para a ciência. Então só de usar RMarkdown, você já está colaborando com a ciência :)\n1. **Eficiente**. É possível configurar e criar templates de análises para quaisquer tipos de aplicações e clientes. \n\nPara detalhes sobre como utilizar o RMarkdown, [leia aqui](http://r4ds.had.co.nz/r-markdown.html) [e aqui](http://rmarkdown.rstudio.com/lesson-1.html).\n\n## GitHub\n\nO GitHub é uma plataforma online para compartilhar códigos. Projetos do GitHub são baseados no `git`, uma ferramenta de versionamento de software.\n\nUtilizar o GitHub é uma boa prática de organizar projetos pois é uma forma de manter os códigos organizados e atualizados na web, sem o perigo de perder tudo acidentalmente. Esse site também é essencial para projetos colaborativos, pois aumenta a produtividade e permite que pessoas de todo lugar ajudem nos projetos. O `tidyverse` só é o que é hoje por conta do *social coding*.\n\nPara detalhes, faça o [data science toolbox](https://www.coursera.org/learn/data-scientists-tools).\n\n## Pipe\n\nO operador *pipe* foi uma das grandes revoluções recentes do R, tornando a leitura de códigos mais lógica, fácil e compreensível. Este operador foi introduzido por Stefan Milton Bache no pacote `magrittr` e já existem diversos pacotes construidos para facilitar a sua utilização.\n\nBasicamente, o operador `%>%` usa o resultado do seu lado esquerdo como primeiro argumento da função do lado direito. Só isso!\n\nPara usar o operador `%>%`, primeiramente instale o pacote `magrittr`.\n\n```{r eval=FALSE}\ninstall.packages(\"magrittr\")\n```\n\ne carregá-lo com a função `library()`\n\n```{r warning=FALSE, message=FALSE}\nlibrary(magrittr)\n```\n\nFeito isso, vamos testar o operador calculando a raiz quadrada da soma de alguns números.\n\n```{r}\nx <- c(1, 2, 3, 4)\nx %>% sum %>% sqrt\n```\n\nO caminho que o código acima seguiu foi enviar o objeto `x` como argumento da função `sum()` e, em seguida, enviar a saida da expressão `sum(x)` como argumento da função `sqrt()`. Observe que não é necessário colocar os parênteses após o nome das funções.\n\nSe escrevermos esse cálculo na forma usual, temos o seguinte código:\n\n```{r}\nsqrt(sum(x))\n```\n\nA princípio, a utilização do `%>%` não parece trazer grandes vantagens, pois a expressão `sqrt(sum(x))` é facilmente compreendida. No entanto, se tivermos um grande número de funções aninhadas, a utilização do `pipe` transforma um código confuso e difícil de ser lido em algo simples e intuitivo. Como exemplo, imagine que você precise escrever uma receita de um bolo usando o R, e cada passo da receita é uma função:\n\n```{r, eval=FALSE}\nesfrie(asse(coloque(bata(acrescente(recipiente(rep(\"farinha\", 2), \"água\", \"fermento\", \"leite\", \"óleo\"), \"farinha\", até = \"macio\"), duração = \"3min\"), lugar = \"forma\", tipo = \"grande\", untada = T), duração = \"50min\"), \"geladeira\", \"20min\")\n```\n\nTente entender o que é preciso fazer. Nada fácil, correto? Agora escrevemos usando o operador `%>%`:\n\n```{r, eval=FALSE}\nrecipiente(rep(\"farinha\", 2), \"água\", \"fermento\", \"leite\", \"óleo\") %>%\n  acrescente(\"farinha\", até = \"macio\") %>%\n  bata(duração = \"3min\") %>%\n  coloque(lugar = \"forma\", tipo = \"grande\", untada = T) %>%\n  asse(duração = \"50min\") %>%\n  esfrie(\"geladeira\", \"20min\")\n```\n\nAgora o código realmente parece uma receita de bolo.\n\nPara mais informações sobre o `pipe` e exemplos de utilização, visite a página [Ceci n'est pas un pipe](http://cran.r-project.org/web/packages/magrittr/vignettes/magrittr.html).\n",
    "created" : 1475570867573.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3509694388",
    "id" : "323E3D32",
    "lastKnownWriteTime" : 1475570878,
    "last_content_update" : 1475570878906,
    "path" : "~/Projects/ragmatic-book/01-setup.Rmd",
    "project_path" : "01-setup.Rmd",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}